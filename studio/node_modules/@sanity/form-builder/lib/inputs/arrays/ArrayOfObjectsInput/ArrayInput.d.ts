import { FormFieldPresence } from '@sanity/base/presence';
import { ArraySchemaType, Marker, Path, SchemaType } from '@sanity/types';
import React from 'react';
import { Subscription } from 'rxjs';
import { PatchEvent } from '../../../PatchEvent';
import { ResolvedUploader, Uploader } from '../../../sanity/uploads/types';
import { ArrayMember } from './types';
export declare type Props = {
    type: ArraySchemaType;
    value: ArrayMember[];
    compareValue: ArrayMember[];
    markers: Marker[];
    level: number;
    onChange: (event: PatchEvent) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    focusPath: Path;
    readOnly: boolean;
    directUploads?: boolean;
    filterField: () => any;
    resolveUploader?: (type: SchemaType, file: File) => Uploader;
    presence: FormFieldPresence[];
};
export declare class ArrayInput extends React.Component<Props> {
    static defaultProps: {
        focusPath: any[];
    };
    _focusArea: HTMLElement | null;
    uploadSubscriptions: Record<string, Subscription>;
    insert: (itemValue: ArrayMember, position: 'before' | 'after', atIndex: number) => void;
    handlePrepend: (value: ArrayMember) => void;
    handleAppend: (value: ArrayMember) => void;
    handleRemoveItem: (item: ArrayMember) => void;
    handleFocus: () => void;
    handleFocusItem: (item: ArrayMember) => void;
    removeItem(item: ArrayMember): void;
    handleItemChange: (event: PatchEvent, item: ArrayMember) => void;
    handleSortEnd: (event: {
        newIndex: number;
        oldIndex: number;
    }) => void;
    getMemberTypeOfItem(item: ArrayMember): SchemaType;
    focus(): void;
    setFocusArea: (el: HTMLElement | null) => void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    handleFixMissingKeys: () => void;
    handleRemoveNonObjectValues: () => void;
    handleUpload: ({ file, type, uploader }: {
        file: File;
        type: SchemaType;
        uploader: Uploader;
    }) => void;
    render(): JSX.Element;
}
//# sourceMappingURL=ArrayInput.d.ts.map